import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import io

def main():
    st.title("Dynamic Regression Model App")

    # File uploader for user dataset
    uploaded_file = st.file_uploader("Upload your CSV file", type=["csv"])

    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        st.write("## Data Sample")
        st.write(df.head())

        st.write("## Data Statistics")
        st.write(df.describe())

        st.write("## Data Info")
        buffer = io.StringIO()
        df.info(buf=buffer)
        s = buffer.getvalue()
        st.text(s)
        
        st.write("## Missing Values")
        st.write(df.isnull().sum())

        # Drop target variable from the predictors list
        columns = df.columns.tolist()
        target = st.selectbox('Select the target variable for regression:', options=columns)

        predictor_options = [col for col in columns if col != target]

        # Add multiselect for user to choose predictor variables
        predictors = st.multiselect(
            'Select predictor variables for regression:',
            options=predictor_options
        )

        if not predictors or not target:
            st.error("Please select at least one predictor and a target variable.")
            return

        st.write("## Scatter Plot")
        if len(predictors) == 1:
            fig, ax = plt.subplots()
            ax.scatter(df[predictors[0]], df[target])
            ax.set_xlabel(predictors[0])
            ax.set_ylabel(target)
            ax.set_title(f'Relationship between {predictors[0]} and {target}')
            st.pyplot(fig)
        else:
            st.write("Scatter plot is only available for a single predictor.")

        # Regression analysis
        X = df[predictors]
        y = df[target]
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        model = LinearRegression()
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        rmse = np.sqrt(mean_squared_error(y_test, y_pred))
        r2 = r2_score(y_test, y_pred)

        st.write(f'## Regression Analysis')
        st.write(f'RMSE: {rmse}')
        st.write(f'R-squared: {r2}')

        if len(predictors) == 1:
            fig, ax = plt.subplots()
            ax.scatter(X_train[predictors[0]], y_train, color='blue', label='Training data')
            ax.scatter(X_test[predictors[0]], y_test, color='green', label='Testing data')
            ax.plot(X_test[predictors[0]], y_pred, color='red', linewidth=2, label='Regression line')
            ax.set_xlabel(predictors[0])
            ax.set_ylabel(target)
            ax.set_title(f'Linear Regression: {predictors[0]} vs {target}')
            ax.legend()
            st.pyplot(fig)
        else:
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.scatter(y_test, y_pred, color='blue', label='Predicted vs Actual')
            ax.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linewidth=2, label='Ideal fit')
            ax.set_xlabel('Actual ' + target)
            ax.set_ylabel('Predicted ' + target)
            ax.set_title('Multilinear Regression: Actual vs Predicted')
            ax.legend()
            st.pyplot(fig)
    else:
        st.write("Please upload a CSV file to proceed.")

if __name__ == "__main__":
    main()